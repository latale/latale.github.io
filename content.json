[{"title":"webpack配置js打包+css分离+图片压缩","date":"2018-02-03T13:03:26.000Z","path":"2018/02/03/webpack配置js打包-css分离/","text":"webpack配置js打包+css分离+图片压缩 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102webpack.config.jsconst path = require(&apos;path&apos;);const uglify = require(&apos;uglifyjs-webpack-plugin&apos;);const htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);const extractTextWebpackPlugin = require(&apos;extract-text-webpack-plugin&apos;);const webpack = require(&apos;webpack&apos;);module.exports = &#123; context: path.join(__dirname, &apos;src&apos;), entry:&#123; entry:&apos;./entry.js&apos; &#125;, output:&#123; path: path.resolve(__dirname,&apos;dist/js&apos;), //打包输出文件 filename: &apos;[name].js&apos;, //输出文件名 publicPath: &apos;/&apos; //绝对路径 &#125;, module:&#123; rules:[ &#123; test:/\\.css$/, use:extractTextWebpackPlugin.extract(&#123; //分离css fallback:&apos;style-loader&apos;, use:[ &#123; loader:&apos;css-loader&apos; &#125;, &#123; loader:&apos;postcss-loader&apos;, options:&#123; plugins: [ require(&apos;autoprefixer&apos;) ] &#125; &#125; ] &#125;) &#125;, &#123; test:/\\.less$/, use:extractTextWebpackPlugin.extract(&#123; use: [&apos;css-loader&apos;,&apos;less-loader&apos;], // loader:[&apos;css-loader&apos;,&apos;less-loader&apos;], // use:&apos;css-loader!less-loader&apos;, fallback: &quot;style-loader&quot; &#125;) &#125;, &#123; test:/\\.(sass|scss)$/, use:extractTextWebpackPlugin.extract(&#123; use:[&apos;css-loader&apos;,&apos;sass-loader&apos;,&#123; loader:&apos;postcss-loader&apos;, options: &#123; plugins: (loader) =&gt; [ require(&apos;autoprefixer&apos;), //加浏览器前缀 ] &#125; &#125;] &#125;) &#125;, &#123; test:/\\.(jpg|png|gif|jpeg)$/, use:[ &#123; loader:&apos;url-loader&apos;, options:&#123; limit:1000, name:&apos;[name][hash:8].[ext]&apos;, //指定名字 output:&apos;images/&apos; &#125; &#125; ] &#125; ] &#125;, plugins: [ new webpack.optimize.UglifyJsPlugin(), //js压缩 new htmlWebpackPlugin(&#123; minify:&#123; removeAttributeQuotes:true &#125;, hash:true, template:&apos;index.html&apos; &#125;), new extractTextWebpackPlugin(&quot;css/[name].css&quot;), //配置分离css new webpack.ProvidePlugin(&#123; //配置jquery $: &quot;jquery&quot;, jQuery: &quot;jquery&quot; &#125;) ], node: &#123; fs: &apos;empty&apos; &#125;, devServer:&#123; contentBase:path.resolve(__dirname,&apos;dist&apos;), host:&apos;localhost&apos;, compress:true, port:7777 &#125;&#125;;","tags":[{"name":"js","slug":"js","permalink":"latale.github.io/tags/js/"},{"name":"webpack","slug":"webpack","permalink":"latale.github.io/tags/webpack/"}]},{"title":"python常用文件操作","date":"2018-01-07T04:10:32.000Z","path":"2018/01/07/pythonOS/","text":"python常用文件操作 ps…记录一些常用的文件操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249import os#获取系统模块参数# print(os.environ.keys())#系统盘符# print(os.environ[&apos;HOME&apos;])#用户盘符# print(os.environ[&apos;PWD&apos;])#window根目录# print(os.environ[&apos;SYSTEMROOT&apos;])#路径拼接print(os.path.join(&apos;d://&apos;,&apos;music&apos;))#当前文件读取指针open(&apos;111.txt&apos;).tell()#移动指针open(&apos;111.txt&apos;).seek(0,1)#当前文件目录a = os.getcwd()c = os.environ[&apos;PWD&apos;]# print(a,b,c)#当前文件路径os.path.realpath(__file__)#当前文件名__file__#创建文件夹os.mkdir()#重命名文件os.rename()w 以写方式打开，a 以追加模式打开r+ 以读写模式打开w+ 以读写模式打开a+ 以读写模式打开rb 以二进制读模式打开wb 以二进制写模式打开ab 以二进制追加模式打开rb+ 以二进制读写模式打开wb+ 以二进制读写模式打开ab+ 以二进制读写模式打开def fillfile(): global new_folders,loopText,loop,os os.mkdir(new_folders) root = os.getcwd() directory = root + os.sep + new_folders + os.sep for i in range(0,100): open(directory + repr(i) + &apos;.txt&apos;,&apos;w&apos;) return directory#输出指定目录下的文件def outputDirs(): dir = input(&quot;请输入需要输入的目录:\\n&quot;) if(os.path.isdir(dir)): dirs = os.listdir(dir) getDirs(dirs) else: print(&quot;未找到此目录&quot;)def getDirs(dirs): for i,e in enumerate(dirs): print(&quot;No.%d\\tname:%s&quot;%(i,e))#搜索文件def searchFile(): file_name = input(&quot;请输入要搜索的文件名:\\n&quot;) if os.path.isfile(file_name): print(&quot;您搜索的文件路径位于:%s&quot;%(file_name))#搜索文件是否存在def searchFileStatus(file_name): if os.path.isfile(file_name): return True else: return False#读取文件def readFile(): file_name = input(&quot;请输入要读取的文件名:&quot;) if searchFileStatus(file_name): while True: open_file = open(file_name,&apos;r&apos;) content = open_file.readlines() if len(content) == 0: break print(content) def searchFileForRename(): file_name = input(&quot;请输入要查找的文件名:\\t(dirname+basebame)\\n&quot;) if os.path.isfile(file_name): new_file_name = input(&quot;要重命名的文件名:\\t(basebame)\\n&quot;) return (file_name,new_file_name) else: print(&quot;未找到此文件&quot;)#重命名文件def rename(): (a,b) = searchFileForRename() realDirPath = os.path.dirname(a) os.rename(a,realDirPath + os.sep + b) print(&quot;旧文件名:%s\\t新文件名:%s&quot;%(a,b))#写入文件def writeFile(): file_name = input(&quot;请输入要写入的文件名:\\n&quot;) if searchFileStatus(file_name): file = open(file_name,&apos;w&apos;) content = input(&quot;请输入要写入的内容:\\n&quot;) file.write(content) print(&quot;写入完成&quot;)#GUIdef dashboard(): mode = input( &quot;=&quot;*20 +&quot;\\n文件操作小工具&quot; +&quot;\\n1.搜索文件\\n2.重命名文件\\n3.列出指定目录下的文件\\nt4.读取文件\\n5.写入文件\\n&quot;+ &quot;=&quot;*20 + &quot;\\n&quot; ) if int(mode) == 1: searchFile() elif int(mode) == 2: rename() elif int(mode) == 3: outputDirs() elif int(mode) == 4: readFile() elif int(mode) == 5: writeFile()# dashboard()=============面向对象版本================import osclass FileSystem: def __init__(self): self.mode = 0 self.modeDes = [&apos;读取文件&apos;,&apos;创建文件&apos;,&apos;列出指定目录下的文件&apos;,&apos;删除文件&apos;,&apos;重命名文件&apos;] self.selectMode() self.callMethod() def selectMode(self): print(&quot;请输入要操作的方法:\\n&quot;) print(&quot;=&quot;*20) for i,e in enumerate(self.modeDes): print(&quot;%d.%s&quot;%(i+1,e)) print(&quot;=&quot;*20) mode = int(input()) self.mode = mode def callMethod(self): if self.mode == 1: self.readFile() elif self.mode == 2: self.mkFile() elif self.mode == 3: self.outputDirs() elif self.mode == 4: self.deleteFile() elif self.mode == 5: self.renameFile() def readFile(self): file_name = self.getPrint(&quot;请输入要读取的文件:\\n&quot;) if self.fileExist(file_name): open_file = open(file_name,&apos;r&apos;) while True: content = open_file.readline() if len(content) == 0: break print(content) def mkFile(self): print(&quot;请输入要创建的文件:&quot;) file_name = input() if ~self.fileExist(file_name): open(file_name,&apos;w&apos;) print(&quot;创建成功&quot;) else: print(&quot;文件已存在,请重命名文件&quot;) def outputDirs(self): dir = self.getPrint(&quot;请输入指定目录下的文件&quot;) if self.dirExist(dir): files = os.listdir(dir) for file in files: print(file) def deleteFile(self): self.getPrint(&quot;请输入要删除的文件:\\n&quot;) if self.fileExist(file_name): os.remove(file_name) print(&quot;删除成功&quot;) else: print(&quot;文件不存在&quot;) def renameFile(self): file_name = self.getPrint(&quot;请输入要重命名的文件:\\n&quot;) if self.fileExist(file_name): new_file_name = input(&quot;请输入新的文件名:&quot;) if self.fileExist(new_file_name): print(&quot;文件名已经存在,请重新输入&quot;) else: os.rename(file_name,new_file_name) print(&quot;重命名文件名成功&quot;) def fileExist(self,file): if os.path.isfile(file): return True else: return False def dirExist(self,dir): if os.path.isdir(dir): return True else: return False def getPrint(self,str): print(str) file_name = input() return file_name FileSystem()","tags":[{"name":"python","slug":"python","permalink":"latale.github.io/tags/python/"}]},{"title":"好看的风景","date":"2017-11-11T15:11:09.000Z","path":"2017/11/11/build1/","text":"好看的风景- - emmmmm……","tags":[{"name":"瞎扯淡","slug":"瞎扯淡","permalink":"latale.github.io/tags/瞎扯淡/"}]},{"title":"Laravel常用实例类","date":"2017-11-11T15:11:09.000Z","path":"2017/11/11/ajax/","text":"Laravel常用实例类 Illuminate\\Http\\Request; Illuminate\\Http\\Response; Illuminate\\Support\\Facades\\Input; Session; Illuminate\\Support\\Facades\\Schema; Illuminate\\Support\\Facades\\Session;","tags":[{"name":"laravel","slug":"laravel","permalink":"latale.github.io/tags/laravel/"},{"name":"php","slug":"php","permalink":"latale.github.io/tags/php/"}]},{"title":"nginx配置Laravel项目","date":"2017-11-03T15:12:29.000Z","path":"2017/11/03/nginx/","text":"nginx配置Laravel项目 配置Laravel项目可以用Apache,Homestead,也可以用nginx。\\ue415 1.下载nginx 先去http://nginx.org/en/download.html下载nginx,下载对应系统的nginx,然后解压在一个盘符里,我的是E盘,所以对应的路径就是E:\\nginx-1.13.6 2.用记事本打开E:\\nginx-1.13.6\\conf\\nginx.conf配置文件，找到以下区域,进行修改 1234567891011121314151617location / &#123; root html; index index.html index.htm; &#125;修改为:location / &#123;root D:\\phpStudy\\WWW\\myLaravel\\public; //项目根目录index index index.html index.htm index.php; //入口文件try_files $uri $uri/ /index.php?query_string; //默认去除index.php&#125;找到以下区域,改配置,以及把#去掉location ~ \\.php$ &#123;root D:\\phpStudy\\WWW\\myLaravel\\public; //项目根目录fastcgi_pass 127.0.0.1:9000; //启动php的端口fastcgi_index index.php; php的默认文件fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; //映射项目路径include fastcgi_params; 3.命令行启动php以及nginx(具体根据自己的php和nginx的路径) php =&gt; D:\\phpStudy\\php\\php-7.0.12-nts\\php-cgi.exe -b 127.0.0.1:9000 -c D:\\phpStudy\\php\\php-7.0.12-nts\\php.ini(-b -&gt; 启动的端口 -c -&gt; 指定php.ini文件) nginx =&gt; E:\\nginx-1.13.6\\nginx.exe -p E:\\nginx-1.13.6(-p -&gt; 指定nginx安装目录) 4.浏览器输入localhost PS =&gt; 有时候出现编码错误,在server里面添加charset utf-8;","tags":[{"name":"nginx","slug":"nginx","permalink":"latale.github.io/tags/nginx/"}]},{"title":"JS常用正则表达式","date":"2017-11-01T09:43:10.000Z","path":"2017/11/01/JS常用正则表达式/","text":"JS常用正则表达式 字符 含义 . 匹配任意字符 ? 匹配0个或者1个 =&gt; {0,1} * 匹配0个或者以上 =&gt; {0,} + 匹配1个或者以上 =&gt; {1,} \\s 匹配空格 \\S 匹配非空格 \\w 匹配字符a-zA-Z0-9_ \\W 匹配非字符 \\d 匹配数字0-9 \\D 匹配非数字 \\b 匹配独立部分(开始,空格,结束) \\B 匹配非独立部分 1.手机验证 1234function validateTel(phone) &#123; const reg = /^1[3|5|7|8][0-9]&#123;9&#125;$/; return reg.test(phone);&#125; 2.邮箱验证 1234function validateEmail(email) &#123; const reg = /^[\\w_-]+@[\\w_-]+(\\.[\\w_-]+)+/; return reg.test(email);&#125; 3. 前后去空 12345678910111213141516function trimString(str,where = ALL) &#123; let reg = null; switch(where) &#123; case L: reg = /^(\\s+)/; return str.replace(reg,&apos;&apos;); case R: reg = /(\\s+)$/; return str.replace(reg,&apos;&apos;); case ALL: req = /^(\\s+)|(\\s+)$/g; return str.replace(reg,&apos;&apos;); default: return &apos;参数错误&apos;; &#125;&#125; 4.中文名字验证 1234function validateCN(name) &#123; const reg = /^[\\u4E00-\\u9FA5]&#123;2,4&#125;$/; return reg.test(name);&#125; 5.格式化url参数 12345678910function formatURL(url) &#123; const reg = /.*\\?/; url = url.replace(reg,&apos;&apos;); let JSON = &#123;&#125;,item = null, urlArr = url.split(&apos;&amp;&apos;); for(var i = 0; i&lt;urlArr.length; i++) &#123; item = urlArr[i].split(&apos;=&apos;); JSON[decodeURIComponent[item[0]]] = decodeURIComponent[item[1]]; &#125;return args;&#125;","tags":[{"name":"Javascript","slug":"Javascript","permalink":"latale.github.io/tags/Javascript/"}]},{"title":"composer命令新建Laravel项目","date":"2017-09-27T07:17:33.000Z","path":"2017/09/27/composer新建Laravel项目/","text":"composer命令来新建Laravel项目 1.进入到本地服务器目录下 1cd d:\\phpstudy\\www 2.使用composer命令新建项目 1composer create-project laravel/laravel myLaravel --prefer -dist .env文件(可以在不同环境有不同的值) 3.打开.env文件,修改mysql配置 123456DB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=test //改成你自己数据库的名字DB_USERNAME=root //改成你自己数据库的登录名DB_PASSWORD=root //改成你自己数据库的密码 PS:假如你要改默认的mysql配置 app/config/database.php 1234567891011121314&apos;mysql&apos; =&gt; [ &apos;driver&apos; =&gt; &apos;mysql&apos;, &apos;host&apos; =&gt; env(&apos;DB_HOST&apos;, &apos;127.0.0.1&apos;), &apos;port&apos; =&gt; env(&apos;DB_PORT&apos;, &apos;3306&apos;), &apos;database&apos; =&gt; env(&apos;DB_DATABASE&apos;, &apos;forge&apos;), &apos;username&apos; =&gt; env(&apos;DB_USERNAME&apos;, &apos;forge&apos;), &apos;password&apos; =&gt; env(&apos;DB_PASSWORD&apos;, &apos;&apos;), &apos;unix_socket&apos; =&gt; env(&apos;DB_SOCKET&apos;, &apos;&apos;), &apos;charset&apos; =&gt; &apos;utf8mb4&apos;, &apos;collation&apos; =&gt; &apos;utf8mb4_unicode_ci&apos;, &apos;prefix&apos; =&gt; &apos;&apos;, &apos;strict&apos; =&gt; true, &apos;engine&apos; =&gt; null,] 4.env文件修改项目应用的APP_KEY(当克隆项目的时候需要更改) 12php artisan key:generateAPP_KEY=base64:wl+WQulEqHPFeORscRIE4apjVLZUN6MhSjjODByvLDw= 5.npm install命令下载package.json的依赖模块 1npm install 6.执行脚本 1npm run production 7.打开浏览器输入localhost ok! 一些配置问题 composer配置国内镜像(解决下载模块慢的问题) composer config -g repo.packagist composer https://packagist.phpcomposer.com composer update(一般下载来的项目进行模块的匹配下载) 有时候遇到类似于下载错误什么php.ini没有找到什么的，可能是fileinfo.ini模块没有开启。 composer install(项目依赖模块的下载) npm install(一些前端依赖模块的下载) chmod 777 项目路径(mac下，可能打开网页空白，可能是文件权限不够)","tags":[{"name":"laravel","slug":"laravel","permalink":"latale.github.io/tags/laravel/"}]},{"title":"chrome调试手机端adb插件","date":"2017-09-20T05:31:55.000Z","path":"2017/09/20/chromeADB调试/","text":"chrome调试手机端adb插件 chrome调试手机端adb插件~ 有时候我们调试手机端的时候，会出现BUG但是不知道错误在哪里，这时候需要调试，这就用到了chrome的一个adb调试插件。 latern(蓝灯) -&gt; 蓝灯下载地址(下载对应版本的即可) 首先我们去安装这个插件adb插件(需翻墙 ↑↑↑↑ 安装蓝灯即可) 插件安装好后,点击如图所示: 点击 View Inspection Targets 进去后，用USB连接手机-&gt;打开设置-&gt;开发者设置-&gt;USB调试-&gt;允许这台电脑调试-&gt;然后打开手机上的chrome浏览器… 如图所示: 然后点击inspect即可开始调试","tags":[{"name":"瞎扯淡","slug":"瞎扯淡","permalink":"latale.github.io/tags/瞎扯淡/"}]},{"title":"node爬虫简书文章~","date":"2017-09-18T09:03:22.000Z","path":"2017/09/18/node爬虫/","text":"node爬虫简书文章~ node爬虫简书文章,用的是Sequelize存到数据库里 先建一个database,命名为’jianshu’ 建完后大概就是这样的结构 config.js 123456789const config = &#123; database: &apos;jianshu&apos;, username:&apos;root&apos;, password: &apos;root&apos;, host: &apos;localhost&apos;, port: 3306 &#125;;module.exports = config; model.js 12345678910111213141516171819202122232425262728293031323334const config = require(&apos;./config&apos;);const Sequelize = require(&apos;Sequelize&apos;);const sequelize = new Sequelize(config.database, config.username, config.password, &#123; host: config.host, dialect: &apos;mysql&apos;, pool: &#123; max: 5, min: 0, idle: 30000 &#125;&#125;);let Content = sequelize.define(&apos;Content&apos;, &#123; id: &#123; type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true, &#125;, author: Sequelize.STRING(255), title: Sequelize.STRING(255), summary: Sequelize.TEXT, wachedCount: &#123; type:Sequelize.BIGINT, defaultValue:0 &#125;, content: Sequelize.TEXT, realContentHref: Sequelize.STRING(100), shareTime: Sequelize.STRING(50), createdTime: Sequelize.BIGINT, updatedTime: Sequelize.BIGINT&#125;, &#123; timestamps: false &#125;);module.exports = Content; jianshu.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174const superagent = require(&apos;superagent&apos;);const cheerio = require(&apos;cheerio&apos;);const fs = require(&apos;fs&apos;);const path = require(&apos;path&apos;);const request = require(&apos;request&apos;);const async = require(&apos;async&apos;);const ContentModel = require(&apos;./model&apos;); //引入数据库模型let jianshuUrl = &apos;http://www.jianshu.com&apos;;let specialUrl = &apos;http://www.jianshu.com/recommendations/collections?utm_medium=index-collections&amp;utm_source=desktop&apos;;//替换urllet replaceSpecialUrl = (str) =&gt; &#123; return `$&#123;jianshuUrl&#125;$&#123;str&#125;`&#125;;//替换strlet replaceStr = (str) =&gt; &#123; return str.replace(/(^\\s+)|(\\s+$)/g, &apos;&apos;);&#125;//获取专题简书专题let getSpecialJson = async () =&gt; &#123; console.log(&apos;&lt;---------- 获取简书的专题开始 --------&gt;&apos;); let specialJson = []; return new Promise((resolve, reject) =&gt; &#123; superagent.get(specialUrl).end((err, res) =&gt; &#123; if (err) console.log(err); let $ = cheerio.load(res.text); let collectionWrap = $(&apos;#list-container .collection-wrap&apos;); collectionWrap.each((i, e) =&gt; &#123; let specialAvatar = replaceSpecialUrl($(e).find(&apos;a:first-child img&apos;).attr(&apos;src&apos;)); let specialHref = replaceSpecialUrl($(e).find(&apos;a:first-child&apos;).attr(&apos;href&apos;)); let specialName = $(e).find(&apos;a:first-child .name&apos;).text(); specialJson.push(&#123; specialAvatar: specialAvatar, specialHref: specialHref, specialName: specialName &#125;); console.log(`正在获取专题名字:$&#123;specialName&#125;`) &#125;) resolve(specialJson); &#125;) &#125;)&#125;//获取文章的概要集合let getSpecialSummaryJson = async () =&gt; &#123; console.log(&apos;&lt;---------- 获取专题数据开始 --------&gt;&apos;); let specialJson = await getSpecialJson(); let result = []; let concurrencyCount = 0; let getCount = 0; return new Promise((resolve, reject) =&gt; &#123; let queue = async.queue((specialJson, callback) =&gt; &#123; let delay = parseInt((Math.random() * 30000000) % 1000, 10); concurrencyCount++; superagent.get(specialJson.specialHref).end((err, res) =&gt; &#123; if (err) &#123; console.log(err); callback(null); &#125; else &#123; let $ = cheerio.load(res.text); let dataList = $(&apos;.note-list li&apos;); concurrencyCount-- dataList.each((i, e) =&gt; &#123; let avatar = $(e).find(&apos;.content .avatar img&apos;).attr(&apos;src&apos;); let author = replaceStr($(e).find(&apos;.content .name&apos;).text()); let title = $(e).find(&apos;.content .title&apos;).text(); let summary = replaceStr($(e).find(&apos;.content .abstract&apos;).text()); let realContentHref = replaceSpecialUrl($(e).find(&apos;.content .title&apos;).attr(&apos;href&apos;)); let shareTime = $(e).find(&apos;.content .time&apos;).attr(&apos;data-shared-at&apos;); let watchedCount = replaceStr($(e).find(&apos;.content .meta a:first-child&apos;).text()); let pushData = &#123; author: author, avatar: `http:$&#123;avatar&#125;`, title: title, summary: summary, realContentHref: realContentHref, shareTime: shareTime, watchedCount: watchedCount &#125;; // console.log(pushData.realContentHref,pushData.watchedCount) console.log(`正在获取的是:$&#123;title&#125; 并发数:$&#123;concurrencyCount&#125; 延迟:$&#123;delay&#125;毫秒`); getCount++; result.push(pushData) &#125;) callback(null) &#125; &#125;) &#125;, 1) queue.drain = function () &#123; // console.log(result); resolve(result) &#125; queue.push(specialJson) &#125;)&#125;;//获取文章的正文集合let getRealContentJson = async () =&gt; &#123; let specialSummaryJson = await getSpecialSummaryJson(); let concurrencyCount = 0; let writeCount = 0; let realContentJson = []; return new Promise((resolve, reject) =&gt; &#123; let queue = async.queue((specialSummaryJson, callback) =&gt; &#123; let delay = parseInt((Math.random() * 30000000) % 1000, 10); concurrencyCount++; superagent.get(specialSummaryJson.realContentHref).end((err, res) =&gt; &#123; if (err) &#123; console.log(err); callback(null); &#125; else &#123; let $ = cheerio.load(res.text); let content = &apos;&apos;; let essay = $(&apos;.show-content&gt;p&apos;).each((i, e) =&gt; &#123; content += $(e).text(); &#125;) realContentJson.push(&#123; content: content, author: specialSummaryJson.author, summary: specialSummaryJson.summary, avatar: specialSummaryJson.avatar, watchedCount: specialSummaryJson.watchedCount, realContentHref:specialSummaryJson.realContentHref, shareTime: specialSummaryJson.shareTime, summary:specialSummaryJson.summary, title:specialSummaryJson.title &#125;) // console.log(specialSummaryJson.watchedCount,specialSummaryJson.realContentHref) callback(null) &#125; &#125;) &#125;, 1) queue.drain = () =&gt; &#123; console.log(&apos;&lt;---------------获取正文数据完成---------------&gt;&apos;) resolve(realContentJson); &#125;; queue.push(specialSummaryJson); &#125;)&#125;;let writeRealContent = async () =&gt; &#123; let realContentJson = await getRealContentJson(); let concurrencyCount = 0; let queue = async.queue((realContentJson, callback) =&gt; &#123; let delay = parseInt((Math.random() * 30000000) % 1000, 10); concurrencyCount++; let DateNow = Date.now(); ContentModel.create(&#123; author: realContentJson.author, avatar: realContentJson.avatar, title: realContentJson.title, summary:realContentJson.summary, content: realContentJson.content, watchedCount: realContentJson.watchedCount, shareTime: realContentJson.shareTime, realContentHref: realContentJson.realContentHref, createdTime: DateNow, updatedTime: DateNow, &#125;).then(function (result) &#123; console.log(`写入标题为$&#123;result.title&#125;的文章成功!`); &#125;).catch(function (err) &#123; console.log(&apos;failed: &apos; + err); &#125;); setTimeout(() =&gt; &#123; concurrencyCount--; callback(null); &#125;, delay) &#125;, 1); //任务队列执行完成的回调 queue.drain = () =&gt; &#123; console.log(&apos;全部写入完成&apos;); &#125; //加入任务队列 queue.push(realContentJson);&#125;writeRealContent(); 然后我们在命令行输入node jianshu开始爬虫 最后看一下数据库有没有写入成功","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"},{"name":"node","slug":"node","permalink":"latale.github.io/tags/node/"}]},{"title":"Node的cluster模块详解","date":"2017-09-04T02:58:23.000Z","path":"2017/09/04/cluster模块/","text":"cluster是node的内置模块，用来nodeJs多核多进程处理。 1234567891011121314151617181920212223242526272829303132333435const cluster = require(&apos;cluster&apos;); //多核处理模块const os = require(&apos;os&apos;); //系统模块const http = require(&apos;http&apos;); 自建服务器模块const cpuLen = os.cpus().length;if(cluster.isMaster) &#123; //是否是主进程(master) Object.keys(cpuLen).forEach(() =&gt; &#123; const worker = cluster.fork(); //创建子进程 worker.send(&apos;i am worker&apos; + worker.id) //向子进程发送消息(由主控来调用) &#125;); cluster.on(&apos;listening&apos;,(worker,address) =&gt; &#123; console.log(&apos;监听子进程向主控的状态改变: &apos; + worker.id + address.id); &#125;)； cluster.on(&apos;online&apos;,(worker) =&gt; &#123; console.log(&apos;监听子进程创建成功,id: &apos; + worker.id); &#125;); cluster.on(&apos;disconnect&apos;,(worker) =&gt; &#123; console.log(&apos;监听子进程断线事件,id: &apos; + worker.id); &#125;); cluster.on(&apos;exit&apos;,(worker) =&gt; &#123; console.log(&apos;监听子进程离开事件,id: &apos; + worker.id); &#125;);&#125; else if(cluster.isWorker) &#123; //是否是子进程(worker) process.on(&apos;message&apos;,(msg) =&gt; &#123; console.log(&apos;master传来的消息: &apos; + msg); //监听主控发来的消息 process.send(&apos;hello i am worker&apos; + cluster.worker.id); &#125;); http.createServer((req,res) =&gt; &#123; res.writeHead(200,&#123;&apos;Content-type&apos;,&apos;text/html&apos;&#125;); res.end(&apos;worker.id: &apos; + cluster.worker.id + &apos;worker.pid:&apos; + process.pid); &#125;)&#125;","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"},{"name":"nodeJs","slug":"nodeJs","permalink":"latale.github.io/tags/nodeJs/"}]},{"title":"vue+axios+node+express简易网易云音乐","date":"2017-08-02T14:35:22.000Z","path":"2017/08/02/网易云音乐/","text":"用vue+axios+node+express做的简易版网易云音乐,很多还没处理…………….. 初始版本- -","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"}]},{"title":"奶茶品鉴大湿~","date":"2017-07-23T08:15:28.000Z","path":"2017/07/23/奶茶的味道/","text":"喝遍全中国的奶茶……..这是我的目标………… 1.一点点，奶味较重，红豆奶茶适合7分甜，本身红豆是很甜，如果正常甜，我这么能吃甜的也觉得太甜.............. 2.一鸣的招牌奶茶，综合感觉不错，焦糖味十足............. 3.品圣喜茶，茶味适中，奶味偏淡.... 未完待续……….","tags":[{"name":"瞎扯淡","slug":"瞎扯淡","permalink":"latale.github.io/tags/瞎扯淡/"}]},{"title":"协议","date":"2017-07-13T11:03:06.000Z","path":"2017/07/13/https协议/","text":"https协议引用资源的问题 https协议下引用http资源时，报NET::ERR_INSECURE_RESPONSE错误 https就是在http的情况下加了一层ssl认证，然而浏览器默认情况下是不允许https协议下的网站去引用http的资源，认为这是不安全的，用户需要点击允许继续访问，用户体验非常差。 解决方案： 1.我要在https的博客下放入http的网易云音乐，我们可以用iframe来解决，可以先在http下进行播放，然后使用iframe引入这个资源，再把它镶嵌到https下的网页即可。 2.引用资源的地址去掉url的协议前缀，就是相对路径，例如//music.163.com，那么浏览器就会自动识别当前是https还是http，就会在前面加上对应的url协议。","tags":[{"name":"https","slug":"https","permalink":"latale.github.io/tags/https/"}]},{"title":"Laravel Blade模板引擎","date":"2017-07-11T15:02:56.000Z","path":"2017/07/11/blade/","text":"Laravel Blade模板引擎 Blade 是 Laravel 提供的一个既简单又强大的模板引擎。和其他流行的 PHP 模板引擎不一样，Blade 并不限制你在视图中使用原生 PHP 代码。所有 Blade 视图文件都将被编译成原生的 PHP 代码并缓存起来，除非它被修改，否则不会重新编译，这就意味着 Blade 基本上不会给你的应用增加任何额外负担。Blade 视图文件使用 .blade.php 扩展名，一般被存放在 resources/views 目录。 模板继承 定义页面布局 Blade两大优点就是模板继承和区块。 123456789101112131415&lt;!-- 文件保存于 resources/views/layouts/app.blade.php --&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;应用程序名称 - @yield(&apos;title&apos;)&lt;/title&gt; &lt;/head&gt; &lt;body&gt; @section(&apos;sidebar&apos;) 这是 master 的侧边栏。 @show &lt;div class=&quot;container&quot;&gt; @yield(&apos;content&apos;) &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; blade模板的文件必须以.blade.php为结尾。如上所示，这是HTML语法，里面包括了@section和@yield命令，@section的语义就是这是定义了一个视图区域，而@yield命令是指用来显示指令内容的。 接下来我们写一个继承布局页面 继承页面布局当定义子页面的时候，我们可以用Blade模板的extends指令来继承页面，这时候我们就可以用@section指令来注入继承页面的@section区域内容，而@yeild指令则用来注入继承页面指定的@yeild的区域。 123456789101112131415&lt;!-- Stored in resources/views/child.blade.php --&gt;@extends(&apos;layouts.app&apos;)@section(&apos;title&apos;, &apos;Page Title&apos;)@section(&apos;sidebar&apos;) @@parent &lt;p&gt;This is appended to the master sidebar.&lt;/p&gt;@endsection@section(&apos;content&apos;) &lt;p&gt;This is my body content.&lt;/p&gt;@endsection 如上所示，siderbar区块中的@@parent指令会追加继承页面原有的内容，如果不使用就会覆盖该布局中的内容。","tags":[{"name":"laravel","slug":"laravel","permalink":"latale.github.io/tags/laravel/"}]},{"title":"雨","date":"2017-07-11T11:15:43.000Z","path":"2017/07/11/雨/","text":"宁波的7月 啊啊啊啊啊，每次上班了开始下雨了，每次下班了也开始下雨了，我能怎么办啊，我也很绝望啊！！！！！！！！！！ 你下也就算了，我还有点准备，可有时候吧↓↓↓↓↓↓↓ 那天我去公交车站的时候，我看这天气这么恐怖，打着闷雷，肯定要下雨了，于是我开启疾跑，冲到了公交车站，看着天啥时下雨？？？？？ 我盼啊盼啊，最后都到家了，还不下，excuse me？ 后知后觉中我感觉我 被耍了！","tags":[{"name":"瞎扯淡","slug":"瞎扯淡","permalink":"latale.github.io/tags/瞎扯淡/"}]},{"title":"面向对象轮播图","date":"2017-07-10T10:12:26.000Z","path":"2017/07/10/面向对象轮播图/","text":"面向对象的轮播图 用的是JQ,大概就是先生成dom,然后绑定事件,然后init~ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;面向对象轮播图&lt;/title&gt; &lt;style&gt; * &#123; margin: 0 auto; padding: 0; list-style: none; &#125; #container &#123; width: 1200px; height: 600px; margin: 0 auto; overflow: hidden; position: relative; &#125; .uls &#123; position: absolute; left: 0; top: 0; &#125; .uls li &#123; width: 1200px; height: 600px; float: left; &#125; .yuan &#123; position: absolute; &#125; .circleUL &#123; transform: translate(-50%, 0); &#125; .circle &#123; width: 30px; height: 30px; background: rgba(0, 0, 0, 0.8); border-radius: 15px; margin-left: 10px; float: left; &#125; .cur &#123; background: rgba(155, 200, 3, 5); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src=&quot;jquery-3.1.1.js&quot;&gt;&lt;/script&gt;&lt;script&gt; function Picrun(options) &#123; this.images = options.images || []; this.width = options.width || 1200; this.height = options.height || 600; this.index = 0; this.timer = null; &#125;; Picrun.prototype = &#123; init: function () &#123; this.bindDOM(); this.bindEvent(); this.bindRUN(); &#125;, bindDOM() &#123; const that = this; this.OUL = $(&apos;&lt;ul&gt;&lt;/ul&gt;&apos;); this.OUL.addClass(&apos;uls&apos;); this.circleOUL = $(&apos;&lt;ul&gt;&lt;/ul&gt;&apos;); this.circleOUL.addClass(&apos;circleUL&apos;); this.circleOUL.css(&#123; &apos;left&apos;: that.width / 2, &apos;bottom&apos;: &apos;20px&apos;, &apos;position&apos;: &apos;absolute&apos;, &apos;translate&apos;: &apos;(-50%,-50%)&apos; &#125;); this.OUL.width((this.images.length + 1) * 100 + &apos;%&apos;); for (let i = 0; i &lt; this.images.length; i++) &#123; let OLI = $(&apos;&lt;li&gt;&lt;img src=&quot;&apos; + this.images[i] + &apos;&quot; alt=&quot;&quot;&gt;&lt;/li&gt;&apos;); this.circle = $(&apos;&lt;li&gt;&lt;/li&gt;&apos;); this.circle.addClass(&apos;circle&apos;); this.circleOUL.append(this.circle); this.OUL.append(OLI); &#125; this.OUL.append(this.OUL.children(0).eq(0).clone()); this.circleOUL.css(&#123; &apos;marginLeft&apos;: -(this.circleOUL.width / 2) &#125;); this.circleOUL.children().eq(0).addClass(&apos;cur&apos;).siblings().removeClass(&apos;cur&apos;); $(&apos;#container&apos;).append(this.OUL); $(&apos;#container&apos;).append(this.circleOUL); &#125;, bindEvent() &#123; const that = this; this.circleOUL.children().each(function (index) &#123; $(this).click(() =&gt; &#123; that.bindPause(); $(this).addClass(&apos;cur&apos;).siblings().removeClass(&apos;cur&apos;); if (that.index == 5 &amp;&amp; $(this).index() == 1) &#123; that.OUL.css(&#123; &apos;left&apos;: 0 &#125;); &#125; that.OUL.stop().animate(&#123; &apos;left&apos;: -index * that.width &#125;); that.bindRUN($(this).index()); &#125;) &#125;) &#125;, bindRUN(indx) &#123; this.index = indx != undefined ? indx : this.index; this.timer = setInterval(() =&gt; &#123; this.index++; if (this.index &gt; 5) &#123; this.index = 1; this.OUL.css(&#123; &apos;left&apos;: 0 &#125;); &#125; this.circleOUL.children().eq(this.index % 5).addClass(&apos;cur&apos;).siblings().removeClass(&apos;cur&apos;); this.OUL.stop().animate(&#123; &apos;left&apos;: -this.width * this.index &#125;); &#125;, 1000); &#125;, bindPause() &#123; clearInterval(this.timer); &#125; &#125;; var pic = new Picrun(&#123; images: [&apos;11.JPG&apos;, &apos;12.JPG&apos;, &apos;13.JPG&apos;, &apos;14.jpg&apos;, &apos;15.jpg&apos;] &#125;); pic.init();&lt;/script&gt;&lt;/html&gt; —-end—- have a good trip!","tags":[{"name":"瞎扯淡","slug":"瞎扯淡","permalink":"latale.github.io/tags/瞎扯淡/"},{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"},{"name":"skills","slug":"skills","permalink":"latale.github.io/tags/skills/"}]},{"title":"电音","date":"2017-07-09T13:21:03.000Z","path":"2017/07/09/xumengyuan/","text":"电音大神徐梦圆徐梦圆大神的电音~~~ U AND ME 【徐梦圆】China-X(Extended Mix)【现场版】","tags":[{"name":"瞎扯淡","slug":"瞎扯淡","permalink":"latale.github.io/tags/瞎扯淡/"},{"name":"音乐","slug":"音乐","permalink":"latale.github.io/tags/音乐/"}]},{"title":"mongoDB使用笔记","date":"2017-07-08T18:23:27.000Z","path":"2017/07/09/mongo命令操作/","text":"mongoDB使用笔记 一些常用的mongoDB命令操作。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596mongo 使用数据库mongod 开机mongoimport 导入数据**开启mongo服务** mongod --dbpath e:\\mongoDB (路径)**连接mongo** mongo**创建数据库** use july**查看数据库** db开机命令: mongod --dbpath E:\\mongo (数据库存储位置,对应一个个数据库文件)1.列出所有数据库 show dbs2.使用某个数据库 use 数据库名字(blog) 假如我们想新建一个数据库,也是用use命令,如果use后面的几个名字不存在的话,就代表新建这个名字的数据库.3.查看当前所在的数据库 db(命令行就会显示当前的数据库)4.插入数据 db.users.insert(&#123;&quot;username&quot;:&quot;july&quot;,&quot;password&quot;:&quot;111&quot;&#125;); 当我们使用insert插入数据时,mongodb如果发现users是个陌生的集合,就会在这个数据库中创建这个集合.5.删除数据库 db.dropDatabase(); 不可恢复- - cls:清屏 ctrl+c 退出数据库操作6.导入数据有时候我们不会命令行一条一条的insert数据,那么可以将所有的数据卸载一个文件下,然后可以通过带入的方式把数据库 mongoimport --db blog --collection users --drop --file E:\\users.json --db 要往哪个数据库导入 --collection 要添加到哪个集合 --drop 把集合所有的数据清空 --file 要导入的文件路径7.查找数据 1.全局查找 db.users.find(); 如果find中不带任何参数,那么就是查询users这个集合下的所有文档 2.精确查找 db.users.find(&quot;username&quot;:&quot;july&quot;); 3.多条件查找 db.users.find(&quot;username&quot;:&quot;july&quot;,&quot;password&quot;:&quot;111&quot;); 4.大于条件 db.users.find(&#123;&quot;password&quot;:$&#123;$gt:50&#125;&#125;); 5.或者条件 db.users.find(&#123;$or:[&#123;&quot;username&quot;:&quot;july&quot;,&#123;&quot;password&quot;:&quot;111&quot;&#125;&#125;]&#125;); 6.排序 db.users.find().sort(&quot;_id&quot;:-1); //1为升序,-1为降序8.修改数据 db.users.update(&#123;&quot;username&quot;:&quot;july&quot;,&#123;$set:&#123;&quot;password&quot;:222&#125;&#125;&#125;); //默认修改匹配的第一条 db.users.update(&#123;&quot;username&quot;:&quot;july&quot;,&#123;$set:&#123;&quot;password&quot;:&quot;333&quot;&#125;&#125;,&#123;multi:true&#125;&#125;); //这样才是修改匹配的所有条,需要在后面加上&#123;multi:true&#125; db.users.update(&quot;username&quot;:&quot;july&quot;,&#123;&quot;username&quot;:&quot;mike&quot;,&quot;password&quot;:&quot;333&quot;&#125;); //完全替换,不出现$set关键字 9.删除数据 db.users.remove(&quot;username&quot;:&quot;july&quot;); //默认删除所有匹配的数据 db.users.remove(&quot;username&quot;:&quot;july&quot;,&#123;justOne:true&#125;); //只删除匹配的第一条 这里推荐可视化工具 ----&gt; moogoose —–end—– have a good trip!","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"},{"name":"mongodb","slug":"mongodb","permalink":"latale.github.io/tags/mongodb/"}]},{"title":"炒鸡好用的翻墙哟","date":"2017-07-08T06:23:29.000Z","path":"2017/07/08/vpn/","text":"自从蓝灯要收费后,我又开始了漫长的寻找翻墙软件的过程~~ -&gt; -&gt; 突然有一天,一款叫做ssbetter的进入了我的视线,我岂能放过- - 首先我们打开官网 http://ssbetter.org/ 如图: 注册后登录进去的界面就是这样的…. 点击左侧的产品订购可以选择月付,年付….咸鱼的我习惯月付…. 点击去后,这里有多种参数,默认就可以了,密码随便写一个,因为后面SSR启动的时候直接二维码扫描就知道把配置数据写入了- -(很哇塞) …………支付完成后 点击左边的软件下载,这里有各种系统的sr或者ssr翻墙软件,咸鱼是window的ssr,所以下面的都是window的ssr来操作的,大同小异 - - 一顿操作后,如图打开 其实不用管这个- -因为直接有二维码扫描可以写入,右键ssr的图标有一个二维码扫描 回到页面中,点击左侧的服务管理,我选择的是新加坡1的,因为是ssr所以选择ssr二维码 点击后会出现一个二维码 然后右键系统图标选择二维码扫描,就会扫描当前页面中显示的二维码,然后会跳出个配置完成的页面,点确定 然后如图选择刚添加好的服务器 然后我选择的是PAC代理,就是国外才走代理,或者你想国内国外都走代理,那就选择全局代理~ 然后代理规则就选择绕过大陆和局域网好了 ok! try to do it~ -&gt; www.google.com –end– have a good trip!","tags":[{"name":"瞎扯淡","slug":"瞎扯淡","permalink":"latale.github.io/tags/瞎扯淡/"},{"name":"skills","slug":"skills","permalink":"latale.github.io/tags/skills/"},{"name":"黑科技","slug":"黑科技","permalink":"latale.github.io/tags/黑科技/"}]},{"title":"flex布局","date":"2017-07-07T10:53:23.000Z","path":"2017/07/07/flex布局/","text":"flex布局 详解flex布局的各种参数~ flexible:能够伸缩或者容易变化,以适应外界条件的变化 box:通用的矩形容器 flex:是flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 flex布局是基于flex-flow流布局的,容器默认存在两根轴,水平的为主轴,垂直的为侧轴,主轴开始位置和边框交叉点叫做main start,结束位置叫做main end,侧轴开始位置和边框的交叉点叫做cross start,结束位置叫做cross end,项目默认主轴排列,主轴占据的空间叫做main size,侧轴占据的空间叫做cross size. 1.flex-direction属性12345678910111213flex-direction属性决定主轴的方向(项目的排列方向)flex-direction:row;row为默认值:主轴为水平方向,起点在左端flex-direction:row-reverse;row-reverse:主轴为水平方向,起点在右端flex-direction:column;column:主轴为垂直方向,起点在上沿flex-direction:column-reverse;column-reverse:主轴为垂直方向,起点在下沿2.flex-wrap属性12345678910默认情况下,项目都排在一根轴线上,可以用flex-wrap来定义怎么排列flex-wrap:nowrap;nowrap为默认值:不换行flex-wrap:wrap;wrap:换行,第一行在上方flex-wrap:wrap-reverse;wrap-reverse:换行，第一行在下方3.flex-flow属性123flex-flow属性是flex-direction属性和flex-wrap属性的简写,默认是row nowrap;flex-flow:flex-direction flex-wrap;4.justify-content属性1234567891011121314151617justify-content属性定义了项目在主轴上的对齐方式justify-content:flex-start;flex-start为默认值:左对齐justify-content:flex-end;flex-end:右对齐justify-content:center;center:居中justify-content:space-between;space-between:两端对齐,项目之间的间隔相等justify-content:space-around;space-around:每个项目两侧间隔相等5.align-items属性12345678910111213141516align-items属性定义项目在侧轴上如何对齐align-items:flex-start;flex-start:侧轴开始位置对齐align-items:flex-end;flex-end:侧轴结束位置对齐align-items:center;center:侧轴中点位置对齐align-items:baseline;baseline:项目第一行文字的基线对齐align-items:stretch;strech为默认值:如果项目没有设置高度或者设置为auto,将占满整个容器的高度6.align-content属性1234567891011121314151617181920align-content属性定义了多根轴线的对齐方式,如果项目只有一根轴线,该属性不起作用align-content:flex-start;flex-start:和侧轴的起点对齐align-content:flex-end;flex-end:和侧轴的终点对齐align-content:center;center:和侧轴的中点对齐align-content:space-between;space-between:和侧轴的两端对齐align-content:space-around;space-around:每根轴线两侧的间隔都相等align-content:strech;strech为默认值:轴线占满整个侧轴—end—have a good trip!","tags":[{"name":"瞎扯淡","slug":"瞎扯淡","permalink":"latale.github.io/tags/瞎扯淡/"}]},{"title":"简易呼吸轮播图","date":"2017-07-07T03:23:29.000Z","path":"2017/07/07/呼吸轮播图/","text":"简易呼吸轮播图 一个叫做简易呼吸的轮播图~~~~ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;简易呼吸轮播图&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0px; padding: 0px; &#125; .fade-box&#123; width: 900px; height: 540px; border: 1px solid #000; margin: 100px auto; position: relative; &#125; .fade-box ul&#123; list-style: none; &#125; .fade-box ul li&#123; width: 900px; height: 540px; position: absolute; top:0px; left:0px; display: none; &#125; .fade-box ul li img&#123; width: 100%; height:100%; &#125; .fade-box ul li.current&#123; display: block; &#125; .fade-box .circle&#123; position: absolute; bottom:20px; width:200px; height: 30px; left:50%; margin-left:-100px; &#125; .fade-box .circle ol&#123; list-style: none; &#125; .fade-box .circle ol li&#123; float: left; width: 20px; height: 20px; border-radius: 20px; margin-right: 30px; background: #ccc; &#125; .fade-box .circle ol .current&#123; background:skyblue &#125; .fade-box .fade-btn a&#123; display: block; width: 40px; height: 80px; position: absolute; font-size: 30px; color: #fff; background: rgba(0,0,0,0.7); line-height: 80px; text-decoration: none; top:50%; margin-top: -40px; text-align: center; &#125; .fade-box .fade-btn a:nth-child(1)&#123; left:0px; &#125; .fade-box .fade-btn a:nth-child(2)&#123; right:0px; &#125; &lt;/style&gt;&lt;/head&gt; &lt;body&gt; &lt;div class=&quot;fade-box&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;&lt;img src=&quot;http://opfmdske3.bkt.clouddn.com/avatar.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;&lt;img src=&quot;http://opfmdske3.bkt.clouddn.com/3c56f44e251f95ca3f1ef39dc1177f3e6609528b.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;&lt;img src=&quot;http://opfmdske3.bkt.clouddn.com/110G31K5-6.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;javascript:void(0);&quot;&gt;&lt;img src=&quot;http://opfmdske3.bkt.clouddn.com/110G31K5-6.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;btn&quot;&gt; &lt;a href=&quot;javascript:void(0);&quot;&gt;&amp;lt;&lt;/a&gt; &lt;a href=&quot;javascript:void(0);&quot;&gt;&amp;gt;&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;circle&quot;&gt; &lt;ol&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;script src=&quot;https://cdn.bootcss.com/jquery/3.1.1/jquery.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(function() &#123; var bannerImgs = $(&apos;.fade-box ul li&apos;); var circles = $(&apos;.fade-box .circle ol li&apos;); var leftBtn = $(&apos;.fade-box .btn a:eq(0)&apos;); var rightBtn = $(&apos;.fade-box .btn a:eq(1)&apos;); var index = 0; circles.eq(0).addClass(&apos;current&apos;); bannerImgs.eq(0).fadeIn(); //判断方向 function runDir(dir)&#123; if (dir == 1) &#123; if (bannerImgs.is(&apos;:animated&apos;)) &#123; return; &#125; bannerImgs.eq(index).fadeOut(); index++; if (index&gt;bannerImgs.length-1)&#123; index = 0; &#125; bannerImgs.eq(index).fadeIn(); circles.eq(index).addClass(&apos;current&apos;).siblings().removeClass(&apos;current&apos;); &#125;else if (dir == 0) &#123; if (bannerImgs.is(&apos;:animated&apos;)) &#123; return; &#125; bannerImgs.eq(index).fadeOut(); index--; if (index&lt;0)&#123; index = bannerImgs.length-1; &#125; bannerImgs.eq(index).fadeIn(); circles.eq(index).addClass(&apos;current&apos;).siblings().removeClass(&apos;current&apos;); &#125;else&#123; throw &apos;请填写正确参数&apos;; &#125; &#125; rightBtn.click(function () &#123; runDir(1); &#125;); leftBtn.click(function () &#123; runDir(0); &#125;); circles.mouseenter(function () &#123; if (bannerImgs.is(&quot;:animated&quot;)) &#123; return; &#125; bannerImgs.eq(index).fadeOut(); index = $(this).index(); bannerImgs.eq(index).fadeIn(); circles.eq(index).addClass(&apos;current&apos;).siblings().removeClass(&apos;current&apos;); &#125;) $(&apos;.fade-box&apos;).mouseenter(function () &#123; clearInterval(timer); &#125;); $(&apos;.fade-box&apos;).mouseleave(function () &#123; timer = setInterval(function () &#123; return runDir(1); &#125;,1000) &#125;) var timer = setInterval(function () &#123; return runDir(1); &#125;,2000); &#125;) &lt;/script&gt; &lt;/html&gt;","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"},{"name":"css","slug":"css","permalink":"latale.github.io/tags/css/"},{"name":"html","slug":"html","permalink":"latale.github.io/tags/html/"}]},{"title":"AJAX原理","date":"2017-07-06T14:29:26.000Z","path":"2017/07/06/Laravel常用实例类/","text":"AJAX的使用 AJAX的原理就是使用XMLHttprequest对象来向服务器进行异步请求，从服务器来获取数据，然后前台使用javascript来接受数据并渲染至HTML。 XMLHttpRequest简单的来说，就是为了不阻塞用户的加载，在这个技术出现之前，可能就是同步，也就是说，在一个请求没完成之前，其他的请求是无法继续的，那么用户体验是非常差的，也就是所谓的等待“白屏”，这个技术很好的解决了这个问题，例如：点菜的时候，一个服务员可以为客人点餐，点完后，让客人等菜到，然后又可以为下一位客人点餐，实现异步操作的过程。onreadystatechange 每次状态改变所触发事件的事件处理程序 responseText 用ajax从服务器来获取的数据包 status 网络的状态码，一般为200或者304 readyState 对象的状态码，4为完成 readyState 对象状态值 0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法） 1 (初始化) 对象已建立，尚未调用send方法 2 (发送数据) send方法已调用，但是当前的状态及http头未知 3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误， 4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778function json2url(json)&#123; var arr = []; json.t = Math.random(); for(var name in json)&#123; console.log(name); arr.push(name + &quot;=&quot; + encodeURIComponent(json[name])); &#125; return arr.join(&quot;&amp;&quot;);&#125;function Jajax(options)&#123; options = options || &#123;&#125;; if(!options.url)return ; options.type = options.type || &quot;get&quot;; options.data = options.data || &#123;&#125;; options.timeout = options.timeout || 0; var str = json2url(options.data);//处理字符串 //1 创建 if(window.XMLHttpRequest)&#123; var xhr = new XMLHttpRequest(); //非IE浏览器 &#125; else &#123; var xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); //IE浏览器 &#125; if(options.type == &quot;get&quot;)&#123; //2 连接 //xhr.open(&quot;get&quot;,options.url + &quot;?&quot; + str,true); xhr.open(&quot;get&quot;,options.url,true); xhr.open(&quot;get&quot;,options.url + &quot;?&quot; + str,true); //3 发送 xhr.send(); &#125; else &#123; //2 连接 xhr.open(&quot;post&quot;,options.url,true); xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;); //添加请求头 //3 发送 xhr.send(str); &#125; //4 接收 xhr.onreadystatechange = function()&#123; if(xhr.readyState == 4)&#123;//完成 clearTimeout(timer); if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status == 304)&#123; options.success &amp;&amp; options.success(xhr.responseText); &#125; else &#123; options.error &amp;&amp; options.error(xhr.status); &#125; &#125; &#125;; if(options.timeout)&#123; var timer = setTimeout(function()&#123; xhr.abort(); //请求超时不请求 &#125;,options.timeout); &#125;&#125; 使用： Jajax(&#123; type:&apos;get&apos;, data:&#123;&apos;name&apos;:&apos;july&apos;,&apos;age&apos;:22&#125;, url:&apos;latale.github.io&apos;, success:function(response) &#123; const data = JSON.parse(response); if(response.status == 200) &#123; console.log(status); &#125; &#125;, error:function(error) &#123; console.log(error); &#125; &#125;) ——end—— have a good trip!","tags":[{"name":"ajax,javascript","slug":"ajax-javascript","permalink":"latale.github.io/tags/ajax-javascript/"}]},{"title":"关于变量提升的一些事~","date":"2017-07-01T07:43:40.000Z","path":"2017/07/01/var/","text":"关于变量提升的一些事~ 最近在看一些变量的东西,可能对js的变量提升有些诧异,所以就来写一写~~~~ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210 function Foo() &#123; sayMyName = function() &#123; console.log(&apos;july&apos;) &#125;; &#125;; sayMyName(); var sayMyName = function() &#123; console.log(&apos;july1&apos;); &#125; sayMyName(); function sayMyName() &#123; console.log(&apos;july2&apos;); &#125; sayMyName(); Foo(); sayMyName(); //模拟 function Foo() &#123; sayMyName = function() &#123; console.log(&apos;july&apos;) &#125;; &#125;; function sayMyName() &#123; //因为同名函数和变量,同名函数会提升,同名变量不会提升。 console.log(&apos;july2&apos;); &#125; sayMyName(); //所以这里打印的是&apos;july2&apos;; var sayMyName = function() &#123; console.log(&apos;july1&apos;); &#125; sayMyName(); //执行到这里,因为上面又覆盖了,所以打印的是&apos;july1&apos;; Foo();//因为执行了FOO()的函数,所以相当于把sayMyName函数重新定义 sayMyName(); //所以打印的是&apos;july&apos;--- var a = 10; function f1() &#123; var a = 10; console.log(a); &#125; f1(); console.log(a); //模拟 var a; //在预解析的时候,变量和函数会提升到作用域的顶层。 function f1() &#123; var a; console.log(a); a = 20; &#125; a = 10; f1(); //当我们执行调用f1函数的时候因为变量会提升到函数作用域的顶层,所以打印的是undefined; console.log(a); //因为函数里的变量是局部变量所以不会影响到全局变量,所以这里打印的还是10; function f1() &#123; console.log(1); &#125; console.log(f1); //同名函数和同名变量的时候,变量不会提升,所以打印的是f1函数体 var f1 = &quot;july&quot;; //当我们执行到这里的时候,我们又把函数覆盖成了一个变量. console.log(f1);//所以这里打印的是&quot;july&quot;--- var a = &quot;july&quot;; foo(); function foo() &#123; console.log(a); var a = &quot;JESSICA&quot;; console.log(a); &#125; //模拟 var a; //预解析的时候,变量和函数提升到作用域的顶层。 function foo() &#123; var a; //变量提升到函数作用域的顶层。 console.log(a); //所以这里打印的是undefined; a= &quot;JESSICA&quot;; //执行到这行的时候又给a赋值了&apos;JESSICA&apos;; console.log(a);//所以这里是&apos;JEESICA&apos; &#125; a =&apos;july&apos;; foo(); //调用函数--- function foo() &#123; if (&apos;a&apos; in window) &#123; var a = 10; &#125; console.log(a); &#125; foo(); //模拟 function foo() &#123; var a; //变量提升到函数顶层。 if (&apos;a&apos; in window) &#123; //因为变量a是声明在函数作用域里,所以不在window。所以为false;&apos; a = 10; &#125; console.log(a); //所以这里执行的是undefined; &#125; foo(); //调用函数--- if (&apos;a&apos; in window) &#123; var a = 10; &#125; console.log(a); var a; //js里除了函数作用域其他都是全局作用域。 if (&apos;a&apos; in window) &#123;//所以a在window里,所以是true a = 10; //a赋值为10 &#125; console.log(a); //所以打印的是10 if (!&apos;a&apos; in window) &#123; var a = 10; &#125; console.log(a); //模拟 var a; //js里除了函数作用域其他都是全局作用域。 if (!&apos;a&apos; in window) &#123; //变量a不在window里,所以是false a = 10; &#125; console.log(a); //所以打印的是undefined--- var foo = 1; function Foo() &#123; if(!foo) &#123; var foo = 10; &#125; console.log(foo); &#125; Foo(); //模拟 var foo; function Foo() &#123; var foo; //变量提升到函数作用域顶层。 if(!foo) &#123; //因为是去反,上面的undefined为假去反就是真,为true foo = 10; //给foo赋值为10 &#125; console.log(foo); //打印为10 &#125; foo = 1; Foo();--- function Foo() &#123; sayMyName = function()&#123; console.log(&quot;1&quot;); &#125;; return this; &#125; Foo.sayMyName = function() &#123; console.log(&quot;2&quot;); &#125;; Foo.prototype.sayMyName = function()&#123; console.log(&quot;3&quot;); &#125;; var sayMyName = function() &#123; console.log(&quot;4&quot;); &#125;; function sayMyName()&#123; console.log(&quot;5&quot;); &#125; Foo.sayMyName(); sayMyName(); Foo().sayMyName(); sayMyName(); new Foo.sayMyName() new Foo().sayMyName(); new new Foo().sayMyName(); //模拟 function Foo() &#123; sayMyName = function()&#123; console.log(&quot;1&quot;); &#125;; return this; &#125; Foo.sayMyName = function() &#123; console.log(&quot;2&quot;); &#125;; Foo.prototype.sayMyName = function()&#123; console.log(&quot;3&quot;); &#125;; function sayMyName()&#123; //同名函数和同名变量情况下,函数提升。 console.log(&quot;5&quot;); &#125; var sayMyName = function() &#123; console.log(&quot;4&quot;); &#125;; Foo.sayMyName(); //这里说的是函数的静态方法,所以打印的是2; sayMyName(); //这里执行的是调用sayMYname的函数所以是4; Foo().sayMyName(); //调用FOO函数,重新定义了sayMyName函数,所以打印的是&apos;1&apos; sayMyName();//因为上面调用FOO函数,重新定义了函数,所以还是&apos;1&apos;; new Foo.sayMyName()//打印的是函数的静态方法也是2,new 2 == 2,前面的new无意义。 new Foo().sayMyName();//这里是new了个新对象,所以指向的是原型对象上的sayMyName方法，所以打印的是&apos;3&apos; new new Foo().sayMyName();//等同于上面,只不过new 3 == 3，无意义。---","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"},{"name":"var","slug":"var","permalink":"latale.github.io/tags/var/"}]},{"title":"创建对象的几种方法","date":"2017-06-29T13:33:42.000Z","path":"2017/06/29/创建对象/","text":"字面量方式创建对象 写了几种字面量方式创建对象的方法~~~~ 基本写法12345678910var person = &#123; name:&apos;July&apos;, age:22, from:Ningbo, getName:function() &#123; console.log(this.name); &#125;&#125;存在的问题 1.代码复用性差 2.如要创建大量的同类型的对象,则需要重复大量的代码。 内置构造函数创建对象JS中的内置构造函数 String,Number,Boolean,Array,Date,Function,Object,RegExp 基本写法123456789var person = new Object();person.name = &quot;July&quot;;person.age = 22;person.from = &apos;Ningbo&apos;;Person.say:function() &#123; console.log(this.name);&#125;存在的问题 1.创建的对象复用性差,无法复用。 2.如果需要创建同一类型的对象,需要写大量重复性代码。 工厂函数创建对象基本写法1234567891011121314151617181920212223function createPerson(name,age,from,hobby) &#123; var person = new Object(); person.name = name; person.age = age; person.from = from; person.hobby = hobby; person.say = function() &#123; console.log(this.name); &#125;; return person;&#125;; //使用工厂函数创建对象 var person1 = createPerson(&apos;July&apos;,22,&apos;Ningbo&apos;,&apos;eat&apos;); var person1 = createPerson(&apos;小明&apos;,20,&apos;Shanghai&apos;,&apos;run&apos;); var person1 = createPerson(&apos;小红&apos;,15,&apos;Xinjiang&apos;,&apos;sleep&apos;); var person1 = createPerson(&apos;July&apos;,22,&apos;Guangdong&apos;,&apos;read&apos;); //打印调用对象的方法 console.log(person1.name); console.log(person2.name); console.log(person3.name); console.log(person4.name); 工厂函数说明 工厂函数方式创建对象就是对内置构造函数创建对象的过程进行了封装，适用于大量生产同类型的对象。 {% codeblock %} function createPerson(name,age,from,hobby) { var person = new Object(); //原料 //创建对象设置属性和方法,进行加工 person.age = age; person.from = from; person.hobby = hobby; person.say = function() { console.log(this.name); }; return person; //原料出厂 } {% endcodeblock %} 思路 把固定不变的封装起来,变化的为函数的参数 工厂函数创建对象实现过程 1.提供一个构造函数 2.在函数内部用new关键字创建一个对象 3.设置对象的属性和方法 4.返回对象 自定义构造函数创建对象 基本写法1234567891011121314151617function Person(name,age,from,hobby) &#123; // var this = new Object(); 默认创建一个对象并赋值给this this.name = name; this.age = age; this.from = from; this.hobby = hobby; this.say:function() &#123; console.log(this.name); &#125; // return this 默认返回一个对象&#125; 自定义构造函数创建对象 var p1 = new Person(&apos;July&apos;,22,&apos;Ningbo&apos;,&apos;eat&apos;); var p2 = new Person(&apos;小明&apos;,20,&apos;Shanghai&apos;,&apos;run&apos;); var p3 = new Person(&apos;小红&apos;,15,&apos;Xinjiang&apos;,&apos;sleep&apos;); var p4 = new Person(&apos;July&apos;,22,&apos;Guangdong&apos;,&apos;read&apos;); 构造函数与new关键字 构造函数与普通函数的区别:函数的首字母大写。 构造函数的作用:完成对象的初始化。 new关键字的作用:用于创建对象(new Object()); 自定义构造函数和简单工厂函数的对比 1.函数的首字母大号(用于区别构造函数和普通函数) 2.创建对象的过程是new关键字实现 3.在函数内部会自动创建新对象,并且赋值给this 4.自动返回创建出来的对象 构造函数的执行过程 1.使用new关键字创建对象 2.把新创建的对象赋值给this 3.在构造函数内部使用this为新创建的对象设置属性和方法 4.默认返回新创建的对象(普通函数如果不显示return则返回undefined) 构造函数的返回值 1.如果在构造函数中没有显示return,则默认返回新创建的对象 2.如果在构造函数中显示return 1.return的是对象,则直接返回该对象,覆盖新创建的对象 2.return的是null或是基本数据类型,则返回新创建的对象 构造函数的问题 每次创建对象,都要创建函数,对象方法内部实现的一模一样,则造成了资源浪费 对象类型 检查对象类型:instanceOf 获取对象的类型:Object.prototype.toString.call(obj) 对象的构造器属性 function Person(name) { this.name = &apos;July&apos;; } console.log(this.constructor); 属性的名称:constructor 属性的作用:指向创建对象的构造函数 构造函数的调用 1.构造函数可以像普通函数一样不通过new关键字来调用 2.在使用构造函数创建对象的时候,如果没有传递参数,则可以省略括号 this 1.如果使用new构造函数的方式调用,则this的指向内部创建的新对象 2.如果像普通函数一样调用构造函数,则this指向全局对象window","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"},{"name":"object","slug":"object","permalink":"latale.github.io/tags/object/"}]},{"title":"面向对象编程","date":"2017-06-25T11:23:29.000Z","path":"2017/06/25/面向对象过程/","text":"面向过程和面向对象过程1.面向对象编程和面向过程编程是一种编程思想,具体的语言关系不大。 2.面向过程和面向对象编程的区别 面向过程编程： 关注点在于解决问题需要的每一个步骤： 示例： 自己洗衣服的过程 1.收集需要洗的衣服 2.准备洗衣粉 3.把衣服放到桶里 4.使劲搓 5.洗好的衣服冲洗干净 6.晾晒 面向对象编程： 1.把衣服收集起来 2.找个洗衣机 3.设置程序 面向对象的三大特性面向对象的三大特性：封装、继承、多态 封装可复用|隐蔽高 123456789101112131415161718192021222324252627282930313233343536373839404142 var name = &apos;仙剑奇侠传&apos;; var actors = [&apos;霍建华&apos;,&apos;胡歌&apos;,&apos;唐嫣&apos;]; var showTime =&quot;2006-1-1 2006-8-1&quot;; var director = &quot;匿名&quot;; var type = &quot;古装剧&quot;; var play = function() &#123; //播放 &#125;; 把上面的变量封装到一个对象里更有语义化。 var film = &#123; name : &apos;仙剑奇侠传&apos;, actors : [&apos;霍建华&apos;,&apos;胡歌&apos;,&apos;唐嫣&apos;], showTime :&quot;2006-1-1 2006-8-1&quot;, director : &quot;匿名&quot;, type : &quot;古装剧&quot;, play : function() &#123; //播放 &#125; &#125;;继承--- 获取已经有的对象的已有属性和方法的一种方式。代码示例 //创建一个空对象 var obj = &#123;&#125;; //上面的film拥有很多的属性和方法 //可以遍历film对象属性,来进行赋值 for(var key in film) &#123; obj[key] = film[key]; &#125;多态--- 多态：polymorphism = poly(复数) + morph(形态) + ism 多用强类型语言,JavaScript具备与生俱来的多态特性。 多态表现为： 1.同一操作,作用于不同的对象,会产生不同的解释和行为。 2.隐藏不同。","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"},{"name":"object","slug":"object","permalink":"latale.github.io/tags/object/"}]},{"title":"JS瀑布流","date":"2017-06-22T11:25:56.000Z","path":"2017/06/22/瀑布流/","text":"JS的瀑布流 JS瀑布流，大概就是像瀑布一样的流式布局，等宽不等高。大概思路就是每次下一行循环对比最低的一行，就把这个图定位到这列图片下去，以此类推，为了节省带宽，就是节流，在循环的最后一张图的时候，如果 screen的高度 + scroll的高度 &gt; 最后一张图片高度的一半 + scroll高度 则进行再次循环。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;瀑布流&lt;/title&gt; &lt;style&gt; *&#123; margin: 0; padding: 0; list-style:none; &#125; #main&#123; position: relative; &#125; img&#123; width:180px; &#125; .box&#123; width:200px; padding:15px 0 0 15px; float:left; &#125; .pic&#123; padding:10px; border:1px solid #ccc; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;main&quot;&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/35.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/20.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/28.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/29.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/48.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/47.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/bb.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/sys.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/sy.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/yt.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/57.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/58.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/mty.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/140fxq.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/35.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/20.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/28.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/29.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/48.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/47.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/bb.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/sys.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/sy.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/yt.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/57.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/58.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/mty.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/140fxq.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/35.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/20.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/28.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/29.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/48.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/47.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/bb.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/sys.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/sy.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/yt.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/57.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/58.JPG&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/mty.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;div class=&quot;pic&quot;&gt;&lt;img src=&quot;imgs/140fxq.jpg&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src=&quot;js/Underscore-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/MyFunc.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var timer = null; window.onload = function() &#123; waterFall(&apos;main&apos;, &apos;box&apos;); window.onresize = function()&#123; clearInterval(timer); timer = setInterval(function()&#123; waterFall(&apos;main&apos;,&apos;box&apos;); &#125;,200) &#125; window.onscroll = function () &#123; if (loadnewimage()) &#123; var dataarr = [ &#123;src: &apos;38.JPG&apos;&#125;, &#123;src: &apos;39.JPG&apos;&#125;, &#123;src: &apos;40.JPG&apos;&#125;, &#123;src: &apos;51.JPG&apos;&#125;, &#123;src: &apos;mty.jpg&apos;&#125;, &#123;src: &apos;qst.jpg&apos;&#125;, &#123;src: &apos;jdc.jpg&apos;&#125; ]; for (var i = 0; i &lt; dataarr.length; i++) &#123; var newbox = document.createElement(&apos;div&apos;); $(&apos;main&apos;).appendChild(newbox); newbox.className = &apos;box&apos;; var newpic = document.createElement(&apos;div&apos;); newbox.appendChild(newpic); var newimg = document.createElement(&apos;img&apos;); newbox.appendChild(newimg); newimg.src = &apos;imgs/&apos; + dataarr[i].src; &#125; &#125; waterFall(&apos;main&apos;, &apos;box&apos;); &#125; function waterFall(obj, box) &#123; var allbox = document.getElementsByClassName(box); var main = document.getElementById(obj); var boxWidth = allbox[0].offsetWidth; var screenW = document.body.clientWidth || document.documentElement.clientWidth; var cols = parseInt(screenW / boxWidth); main.style.width = boxWidth * cols + &apos;px&apos;; main.style.margin = &apos;0 auto&apos;; var heightarr = []; for (var i = 0; i &lt; allbox.length; i++) &#123; var boxheight = allbox[i].offsetHeight; if (i &lt; cols) &#123; heightarr.push(boxheight); allbox[i].style=&apos;&apos;; &#125; else &#123; var minheight = _.min(heightarr); var minboxindex = heightarr.indexOf(minheight); allbox[i].style.position = &apos;absolute&apos;; allbox[i].style.left = minboxindex * boxWidth + &apos;px&apos;; allbox[i].style.top = minheight + &apos;px&apos;; heightarr[minboxindex] += boxheight; &#125; &#125; &#125; function loadnewimage() &#123; var allbox = document.getElementsByClassName(&apos;box&apos;); var lastbox = allbox[allbox.length - 1]; var screenH = document.body.clientHeight || document.documentElement.clientHeight; var scrollTop = scroll().top; var lastboxheight = lastbox.offsetTop + lastbox.offsetHeight * 0.5; return lastboxheight &lt;= screenH + scrollTop; &#125; &#125;&lt;/script&gt;&lt;/html&gt;","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"}]},{"title":"Javascript中的原型式继承","date":"2017-06-20T15:13:28.000Z","path":"2017/06/20/原型继承/","text":"继承的概念 继承:通过一定的方式事项某个类型A获取另外一个类型B的属性和方法其中类型A就是子类型,类型B就是父类型。 Javascript的继承 Object是所有对象的父级|父类型|超类型, js中所有的对象都直接或间接继承自Object。继承有两种方式,接受继承和实现继承, 在js中只有实现继承,试下继承主要依赖原型链来完成。 Javascript实现继承的几种方式 1.原型式继承 2.原型链继承 3.经典继承 4.组合继承 原型式继承原型链继承方式A 12345678910111213141516171819&lt;script&gt; //提供一个构造函数 function Person(name,age) &#123; this.name = name; this.age = age; &#125;; //设置原型对象的属性 Person.prototype.className = &apos;1班&apos;; //使用构造函数来创建原型对象 var p1 = new Person(&apos;小明&apos;,10); var p2 = new Person(&apos;小红&apos;,20); //打印p1,p2的className console.log(p1.className); //1班 console.log(p2.className); //1班&lt;/script&gt; 原型链继承方式B 12345678910111213141516171819202122232425&lt;script&gt; //提供一个构造函数 function Person(name,age) &#123; this.name = name; this.age = age; &#125;; //设置原型对象的属性 Person.prototype = &#123; constructor:Person, className:&apos;1班&apos; &#125;; //使用构造函数来创建原型对象 var p1 = new Person(&apos;小明&apos;,10); var p2 = new Person(&apos;小红&apos;,20); //打印p1,p2的className console.log(p1.className); //1班 console.log(p2.className); //1班 //对象p1,p2继承了构造函数原型对象的属性className, 但是使用原型替换的方式实现继承的时候,原有原型对象中的属性和方法会丢失。&lt;/script&gt; 原型链继承方式C 12345678910111213141516171819202122232425//提供一个超类型|父类型构造函数function SuperPerson() &#123; this.name = &apos;SuperPerson&apos;; this.showName = function() &#123; console.log(this.name); &#125; &#125;//设置父类型的原型属性和原型方法 SuperPerson.prototype.info = &apos;SuperPerson的信息&apos;; SuperPerson.prototype.showinfo = function() &#123; console.log(this.info); &#125;//提供子类型 function Person() &#123;&#125;;//设置继承 Person.prototype = SuperPerson.prototype; Person.prototype.constructor = Person; var p1 = new Person(); console.log(p1.name); //undefined console.log(p1.info); //SuperPerson的信息 p1.showinfo(); //SuperPerson的信息 p1.showName(); //not a function 结论 上面的方式可以继承父类型的原型属性和原型方法,但是无法继承实例属性和实例方法","tags":[{"name":"javascript","slug":"javascript","permalink":"latale.github.io/tags/javascript/"},{"name":"object","slug":"object","permalink":"latale.github.io/tags/object/"},{"name":"prototype","slug":"prototype","permalink":"latale.github.io/tags/prototype/"}]},{"title":"起点","date":"2017-06-20T14:33:19.000Z","path":"2017/06/20/artitle/","text":"这是一条咸鱼的生活~","tags":[{"name":"瞎扯淡","slug":"瞎扯淡","permalink":"latale.github.io/tags/瞎扯淡/"}]}]